<?php

/**
 * @file
 * Hook implementations.
 */

use \Drupal\little_helpers\Webform\Webform;
use \Drupal\manual_direct_debit\AccountData;
use \Drupal\manual_direct_debit\AccountDataController;

/**
 * Implements hook_payment_method_controller_info().
 */
function manual_direct_debit_payment_method_controller_info() {
  return array('\Drupal\manual_direct_debit\AccountDataController');
}

/**
 * Implements hook_entity_load().
 */
function manual_direct_debit_entity_load(array $entities, $entity_type) {
  if ($entity_type != 'payment') {
    return;
  }
  $query = db_select('manual_direct_debit_account_data', 'd')
    ->fields('d')
    ->condition('pid', array_keys($entities));
  $result = $query->execute();
  while ($data = $result->fetchAssoc()) {
    $payment = $entities[$data['pid']];
    $payment->method_data = array(
      'holder' => $data['holder'],
      'country' => $data['country'],
    ) + unserialize($data['account']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function manual_direct_debit_payment_insert(Payment $payment) {
  if (!($payment->method->controller instanceof AccountDataController)) {
    return;
  }
  AccountData::fromPayment($payment, TRUE)->save();
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function manual_direct_debit_payment_update(Payment $payment) {
  if (!($payment->method->controller instanceof AccountDataController)) {
    return;
  }
  AccountData::fromPayment($payment, FALSE)->save();
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function manual_direct_debit_payment_delete(Payment $payment) {
  if (!($payment->method->controller instanceof AccountDataController)) {
    return;
  }
  AccountData::fromPayment($payment, FALSE)->delete();
}

/**
 * Implements hook_webform_submission_load().
 */
function manual_direct_debit_webform_submission_load(&$submissions) {
  $sids = array_keys($submissions);
  if (empty($sids)) {
    return;
  }
  $load = array();
  foreach ($submissions as $sid => $submission) {
    $load[$submission->nid][] = $sid;
  }
  foreach ($load as $nid => $sids) {
    $node = node_load($nid);
    $webform = new Webform($node);
    foreach (array_keys($webform->componentsByType('paymethod_select')) as $cid) {
      $accounts = AccountData::bySubmissions($nid, $cid, $sids);
      foreach ($accounts as $sid => $account) {
        $submissions[$sid]->manual_direct_debit = $account->data();
      }
    }
  }
}

/**
 * Implements hook_webform_submission_results_download_submission_information_info().
 *
 * @param stdclass $node
 * @param array $options
 */
function manual_direct_debit_webform_results_download_submission_information_info($node, $options) {
  $webform = new Webform($node);
  $components = $webform->componentsByType('paymethod_select');
  $info = array();
  if (count($components)) {
    $info['account_holder'] = t('Account holder');
    $info['account_iban'] = t('IBAN');
    $info['account_bic'] = t('BIC');
    $info['account_country'] = t('Account country');
    $info['account_number'] = t('Account number');
    $info['account_bank_code'] = t('Bank code');
    $info['account_payment_date'] = t('Payment date');
  }
  return $info;
}

/**
 * Implements hook_webform_submission_results_download_submission_information_data().
 */
function manual_direct_debit_webform_results_download_submission_information_data($submission, array $options, $serial_start, $row_count) {
  if (empty($submission->manual_direct_debit)) {
    return;
  }
  $d = $submission->manual_direct_debit;
  $data['account_holder'] = $d['holder'];
  $data['account_country'] = $d['country'];
  $data['account_iban'] = $d['account']['iban'];
  $data['account_bic'] = $d['account']['bic'];
  $data['account_number'] = $d['account']['account'];
  $data['account_bank_code'] = $d['account']['bank_code'];
  $data['account_payment_date'] = $d['account']['payment_date'];
  return $data;
}
